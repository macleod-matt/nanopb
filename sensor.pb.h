/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6 */

#ifndef PB_SENSOR_PB_H_INCLUDED
#define PB_SENSOR_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _MessageID { 
    MessageID_INVALID = 0, 
    MessageID_FORCE = 1, 
    MessageID_ACCEL = 2, 
    MessageID_TEMP = 3, 
    MessageID_BAT = 4, 
    MessageID_TIME = 5, 
    MessageID_MIC = 6, 
    MessageID_CMD = 7, 
    MessageID_SRIMSTATUS = 8, 
    MessageID_MFTMSTATUS = 9, 
    MessageID_ACCELCFG = 10, 
    MessageID_TEMPCFG = 11, 
    MessageID_FORCECFG = 12, 
    MessageID_MICCFG = 13, 
    MessageID_SENSECFG = 14 
} MessageID;

typedef enum _DestinationID { 
    DestinationID_ERRDEST = 0, 
    DestinationID_MFTM = 55, 
    DestinationID_SRIM = 66, 
    DestinationID_HOSTPC = 77 
} DestinationID;

typedef enum _PdmModes { 
    PdmModes_PDM_MODE_STEREO = 0, 
    PdmModes_PDM_MODE_MONO = 1 
} PdmModes;

typedef enum _HostCommands { 
    HostCommands_ERROR = 0, 
    HostCommands_start = 1, 
    HostCommands_stop = 2, 
    HostCommands_low_power_mode = 3, 
    HostCommands_send_status = 4, 
    HostCommands_reset = 5, 
    HostCommands_sensor_config = 6 
} HostCommands;

/* Struct definitions */
typedef struct _Acceleration { 
    pb_byte_t data[234];
} Acceleration;

typedef struct _Battery { 
    int32_t mv_reading;
} Battery;

typedef struct _Force { 
    pb_byte_t data[234];
} Force;

typedef struct _HostPC { 
    int32_t command;
} HostPC;

typedef struct _Kx134Config { 
    bool enabled;
    int32_t odr;
    int32_t gRange;
    int32_t resolution;
} Kx134Config;

typedef struct _MftmStatus { 
    double firmware_version;
    bool peripheral_ready;
    bool accel_connected;
    int32_t temp_connected;
    int32_t force_connected;
    int32_t mic_connected;
} MftmStatus;

typedef struct _Microphone { 
    pb_byte_t data[128];
} Microphone;

typedef struct _OdrFreqData { 
    uint32_t odr_frequency_tenth_hz;
    uint32_t odr_delta_tenth_hz;
} OdrFreqData;

typedef struct _SrimStatus { 
    double firmware_version;
    bool central_ready;
    bool ble_connected;
} SrimStatus;

typedef struct _Temperature { 
    uint32_t voltage_internal;
    uint32_t voltage_channel1;
    uint32_t voltage_channel2;
} Temperature;

typedef struct _ads124s08Config { 
    bool enabled;
    int32_t odr;
    bool enableChan0;
    bool enableChan1;
    bool enableChan2;
    bool enableChan3;
    bool enableChan4;
    bool enableChan5;
} ads124s08Config;

typedef struct _micConfig { 
    bool enabled;
    PdmModes mode;
} micConfig;

typedef struct _saadcConfig { 
    bool enabled;
    int32_t odr;
    bool enableChan0;
    bool enableChan1;
    bool enableChan2;
    bool enableChan3;
    bool enableChan4;
    bool enableChan5;
    bool enableBatteryChan;
    bool enableChan7;
} saadcConfig;

typedef struct _MftmConfig { 
    bool has_kx134Config;
    Kx134Config kx134Config;
    bool has_adsConfig;
    ads124s08Config adsConfig;
    bool has_saadcConfig;
    saadcConfig saadcConfig;
    bool has_micConfig;
    micConfig micConfig;
} MftmConfig;


/* Helper constants for enums */
#define _MessageID_MIN MessageID_INVALID
#define _MessageID_MAX MessageID_SENSECFG
#define _MessageID_ARRAYSIZE ((MessageID)(MessageID_SENSECFG+1))

#define _DestinationID_MIN DestinationID_ERRDEST
#define _DestinationID_MAX DestinationID_HOSTPC
#define _DestinationID_ARRAYSIZE ((DestinationID)(DestinationID_HOSTPC+1))

#define _PdmModes_MIN PdmModes_PDM_MODE_STEREO
#define _PdmModes_MAX PdmModes_PDM_MODE_MONO
#define _PdmModes_ARRAYSIZE ((PdmModes)(PdmModes_PDM_MODE_MONO+1))

#define _HostCommands_MIN HostCommands_ERROR
#define _HostCommands_MAX HostCommands_sensor_config
#define _HostCommands_ARRAYSIZE ((HostCommands)(HostCommands_sensor_config+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define MftmConfig_init_default                  {false, Kx134Config_init_default, false, ads124s08Config_init_default, false, saadcConfig_init_default, false, micConfig_init_default}
#define Kx134Config_init_default                 {0, 0, 0, 0}
#define ads124s08Config_init_default             {0, 0, 0, 0, 0, 0, 0, 0}
#define saadcConfig_init_default                 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define micConfig_init_default                   {0, _PdmModes_MIN}
#define Acceleration_init_default                {{0}}
#define Microphone_init_default                  {{0}}
#define Temperature_init_default                 {0, 0, 0}
#define Force_init_default                       {{0}}
#define OdrFreqData_init_default                 {0, 0}
#define Battery_init_default                     {0}
#define HostPC_init_default                      {0}
#define SrimStatus_init_default                  {0, 0, 0}
#define MftmStatus_init_default                  {0, 0, 0, 0, 0, 0}
#define MftmConfig_init_zero                     {false, Kx134Config_init_zero, false, ads124s08Config_init_zero, false, saadcConfig_init_zero, false, micConfig_init_zero}
#define Kx134Config_init_zero                    {0, 0, 0, 0}
#define ads124s08Config_init_zero                {0, 0, 0, 0, 0, 0, 0, 0}
#define saadcConfig_init_zero                    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define micConfig_init_zero                      {0, _PdmModes_MIN}
#define Acceleration_init_zero                   {{0}}
#define Microphone_init_zero                     {{0}}
#define Temperature_init_zero                    {0, 0, 0}
#define Force_init_zero                          {{0}}
#define OdrFreqData_init_zero                    {0, 0}
#define Battery_init_zero                        {0}
#define HostPC_init_zero                         {0}
#define SrimStatus_init_zero                     {0, 0, 0}
#define MftmStatus_init_zero                     {0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Acceleration_data_tag                    1
#define Battery_mv_reading_tag                   1
#define Force_data_tag                           1
#define HostPC_command_tag                       1
#define Kx134Config_enabled_tag                  1
#define Kx134Config_odr_tag                      2
#define Kx134Config_gRange_tag                   3
#define Kx134Config_resolution_tag               4
#define MftmStatus_firmware_version_tag          1
#define MftmStatus_peripheral_ready_tag          2
#define MftmStatus_accel_connected_tag           3
#define MftmStatus_temp_connected_tag            4
#define MftmStatus_force_connected_tag           5
#define MftmStatus_mic_connected_tag             6
#define Microphone_data_tag                      1
#define OdrFreqData_odr_frequency_tenth_hz_tag   1
#define OdrFreqData_odr_delta_tenth_hz_tag       2
#define SrimStatus_firmware_version_tag          1
#define SrimStatus_central_ready_tag             2
#define SrimStatus_ble_connected_tag             3
#define Temperature_voltage_internal_tag         1
#define Temperature_voltage_channel1_tag         2
#define Temperature_voltage_channel2_tag         3
#define ads124s08Config_enabled_tag              1
#define ads124s08Config_odr_tag                  2
#define ads124s08Config_enableChan0_tag          3
#define ads124s08Config_enableChan1_tag          4
#define ads124s08Config_enableChan2_tag          5
#define ads124s08Config_enableChan3_tag          6
#define ads124s08Config_enableChan4_tag          7
#define ads124s08Config_enableChan5_tag          8
#define micConfig_enabled_tag                    1
#define micConfig_mode_tag                       2
#define saadcConfig_enabled_tag                  1
#define saadcConfig_odr_tag                      2
#define saadcConfig_enableChan0_tag              3
#define saadcConfig_enableChan1_tag              4
#define saadcConfig_enableChan2_tag              5
#define saadcConfig_enableChan3_tag              6
#define saadcConfig_enableChan4_tag              7
#define saadcConfig_enableChan5_tag              8
#define saadcConfig_enableBatteryChan_tag        9
#define saadcConfig_enableChan7_tag              10
#define MftmConfig_kx134Config_tag               1
#define MftmConfig_adsConfig_tag                 2
#define MftmConfig_saadcConfig_tag               3
#define MftmConfig_micConfig_tag                 4

/* Struct field encoding specification for nanopb */
#define MftmConfig_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  kx134Config,       1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  adsConfig,         2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  saadcConfig,       3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  micConfig,         4)
#define MftmConfig_CALLBACK NULL
#define MftmConfig_DEFAULT NULL
#define MftmConfig_kx134Config_MSGTYPE Kx134Config
#define MftmConfig_adsConfig_MSGTYPE ads124s08Config
#define MftmConfig_saadcConfig_MSGTYPE saadcConfig
#define MftmConfig_micConfig_MSGTYPE micConfig

#define Kx134Config_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, INT32,    odr,               2) \
X(a, STATIC,   SINGULAR, INT32,    gRange,            3) \
X(a, STATIC,   SINGULAR, INT32,    resolution,        4)
#define Kx134Config_CALLBACK NULL
#define Kx134Config_DEFAULT NULL

#define ads124s08Config_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, INT32,    odr,               2) \
X(a, STATIC,   SINGULAR, BOOL,     enableChan0,       3) \
X(a, STATIC,   SINGULAR, BOOL,     enableChan1,       4) \
X(a, STATIC,   SINGULAR, BOOL,     enableChan2,       5) \
X(a, STATIC,   SINGULAR, BOOL,     enableChan3,       6) \
X(a, STATIC,   SINGULAR, BOOL,     enableChan4,       7) \
X(a, STATIC,   SINGULAR, BOOL,     enableChan5,       8)
#define ads124s08Config_CALLBACK NULL
#define ads124s08Config_DEFAULT NULL

#define saadcConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, INT32,    odr,               2) \
X(a, STATIC,   SINGULAR, BOOL,     enableChan0,       3) \
X(a, STATIC,   SINGULAR, BOOL,     enableChan1,       4) \
X(a, STATIC,   SINGULAR, BOOL,     enableChan2,       5) \
X(a, STATIC,   SINGULAR, BOOL,     enableChan3,       6) \
X(a, STATIC,   SINGULAR, BOOL,     enableChan4,       7) \
X(a, STATIC,   SINGULAR, BOOL,     enableChan5,       8) \
X(a, STATIC,   SINGULAR, BOOL,     enableBatteryChan,   9) \
X(a, STATIC,   SINGULAR, BOOL,     enableChan7,      10)
#define saadcConfig_CALLBACK NULL
#define saadcConfig_DEFAULT NULL

#define micConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, UENUM,    mode,              2)
#define micConfig_CALLBACK NULL
#define micConfig_DEFAULT NULL

#define Acceleration_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, data,              1)
#define Acceleration_CALLBACK NULL
#define Acceleration_DEFAULT NULL

#define Microphone_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, data,              1)
#define Microphone_CALLBACK NULL
#define Microphone_DEFAULT NULL

#define Temperature_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   voltage_internal,   1) \
X(a, STATIC,   SINGULAR, UINT32,   voltage_channel1,   2) \
X(a, STATIC,   SINGULAR, UINT32,   voltage_channel2,   3)
#define Temperature_CALLBACK NULL
#define Temperature_DEFAULT NULL

#define Force_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, data,              1)
#define Force_CALLBACK NULL
#define Force_DEFAULT NULL

#define OdrFreqData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   odr_frequency_tenth_hz,   1) \
X(a, STATIC,   SINGULAR, UINT32,   odr_delta_tenth_hz,   2)
#define OdrFreqData_CALLBACK NULL
#define OdrFreqData_DEFAULT NULL

#define Battery_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    mv_reading,        1)
#define Battery_CALLBACK NULL
#define Battery_DEFAULT NULL

#define HostPC_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    command,           1)
#define HostPC_CALLBACK NULL
#define HostPC_DEFAULT NULL

#define SrimStatus_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, DOUBLE,   firmware_version,   1) \
X(a, STATIC,   SINGULAR, BOOL,     central_ready,     2) \
X(a, STATIC,   SINGULAR, BOOL,     ble_connected,     3)
#define SrimStatus_CALLBACK NULL
#define SrimStatus_DEFAULT NULL

#define MftmStatus_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, DOUBLE,   firmware_version,   1) \
X(a, STATIC,   SINGULAR, BOOL,     peripheral_ready,   2) \
X(a, STATIC,   SINGULAR, BOOL,     accel_connected,   3) \
X(a, STATIC,   SINGULAR, INT32,    temp_connected,    4) \
X(a, STATIC,   SINGULAR, INT32,    force_connected,   5) \
X(a, STATIC,   SINGULAR, INT32,    mic_connected,     6)
#define MftmStatus_CALLBACK NULL
#define MftmStatus_DEFAULT NULL

extern const pb_msgdesc_t MftmConfig_msg;
extern const pb_msgdesc_t Kx134Config_msg;
extern const pb_msgdesc_t ads124s08Config_msg;
extern const pb_msgdesc_t saadcConfig_msg;
extern const pb_msgdesc_t micConfig_msg;
extern const pb_msgdesc_t Acceleration_msg;
extern const pb_msgdesc_t Microphone_msg;
extern const pb_msgdesc_t Temperature_msg;
extern const pb_msgdesc_t Force_msg;
extern const pb_msgdesc_t OdrFreqData_msg;
extern const pb_msgdesc_t Battery_msg;
extern const pb_msgdesc_t HostPC_msg;
extern const pb_msgdesc_t SrimStatus_msg;
extern const pb_msgdesc_t MftmStatus_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define MftmConfig_fields &MftmConfig_msg
#define Kx134Config_fields &Kx134Config_msg
#define ads124s08Config_fields &ads124s08Config_msg
#define saadcConfig_fields &saadcConfig_msg
#define micConfig_fields &micConfig_msg
#define Acceleration_fields &Acceleration_msg
#define Microphone_fields &Microphone_msg
#define Temperature_fields &Temperature_msg
#define Force_fields &Force_msg
#define OdrFreqData_fields &OdrFreqData_msg
#define Battery_fields &Battery_msg
#define HostPC_fields &HostPC_msg
#define SrimStatus_fields &SrimStatus_msg
#define MftmStatus_fields &MftmStatus_msg

/* Maximum encoded size of messages (where known) */
#define Acceleration_size                        237
#define Battery_size                             11
#define Force_size                               237
#define HostPC_size                              11
#define Kx134Config_size                         35
#define MftmConfig_size                          101
#define MftmStatus_size                          46
#define Microphone_size                          131
#define OdrFreqData_size                         12
#define SrimStatus_size                          13
#define Temperature_size                         18
#define ads124s08Config_size                     25
#define micConfig_size                           4
#define saadcConfig_size                         29

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
